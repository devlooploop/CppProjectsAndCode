// Course 05 - Algorithms & Problem-Solving Level 2

// Problem #40 /2 Copy Distinct Numbers to Array

/*
Write a program to fill array with numbers, then print distinct
numbers to another array.

Output:
Array 1 elements: 
10 10 10 50 50 70 70 70 70 90
      
Array 2 distinct elements:
10 50 70 90
*/

#include<iostream>
using namespace std;

void FillArrayWithNumbers(int arr[100], int &arrLength )
{
	// Here We could use cin >> to fill the array
	arrLength = 10; 
	arr[0] = 10;
	arr[1] = 10;
	arr[2] = 10;
	arr[3] = 50;
	arr[4] = 50;
	arr[5] = 70;
	arr[6] = 70;
	arr[7] = 70;
	arr[8] = 70;
	arr[9] = 90;

}

short FindNumberPositionInArray(int Number, int arr[100], int arrLength)
{
	/*This function will search for a number in array and
	return its index, or return -1 if it does not exists*/

	for (int i = 0; i < arrLength; i++)
	{
		if (arr[i] == Number)
			return i; //return its index
	}
	//if you reached here, this means the number is not found
	return -1;
}

bool IsNumberInArray(int Number, int arr[100], int arrLength)
{
	return FindNumberPositionInArray(Number, arr, arrLength) != -1;
}

void AddArrayElement(int Number, int arr[100], int& arrLength)
{

	//its a new element so we need to add the length by 1
	arrLength++;
	arr[arrLength - 1] = Number;

}

void CopyDistinctNumbersToArray(int arrSource[100], int arrDestination[100], int arrSourceLength, int &arrDestinationLength)
{
	for (int i = 0; i < arrSourceLength; i++)
	{
		if (!IsNumberInArray(arrSource[i], arrDestination, arrDestinationLength))
		{
			AddArrayElement(arrSource[i], arrDestination, arrDestinationLength);
		}
		
	}
		
}

void PrintArray(int arr[100], int arrLength)
{
	for (int i = 0; i < arrLength; i++)

		cout << arr[i] << " ";

	cout << "\n";
}


int main()
{

	//Seeds the random number generator in C++, called only once    
	srand((unsigned)time(NULL));

	int arrSource[100], arrDestination[100];
	int arrSourceLength = 0, arrDestinationLength = 0;

	cout << "\nArray 1 elements: \n";
	FillArrayWithNumbers(arrSource, arrSourceLength);
	PrintArray(arrSource, arrSourceLength);

	
	CopyDistinctNumbersToArray(arrSource, arrDestination, arrSourceLength, arrDestinationLength);
	
	cout << "\nArray 2 distinct elements: \n";
	PrintArray(arrDestination, arrDestinationLength);

    return 0;
}






	




















































































































































































































































































































































































