// Course 05 - Algorithms & Problem-Solving Level 2

// Problem #29/2 Copy only Prime numbers.

/*
Write a program to fill array with max size 100 
	with random numbers from 1 to 100, Copy only Prime 
	numbers to another array 
	and print it.
Input:
10

Output:
Array 1 Elements: 42 68 35 1 70 25 79 59 63 65

Prime numbers in Array2 : 
1 79
*/

#include <iostream>

using namespace std;

enum enPrimNotPrime {Prime = 1, NotPrime = 2};

enPrimNotPrime CheckPrime(int Number)
{
	int M = round(Number / 2);
	for (int Counter = 2; Counter <= M; Counter++)
	{
		if (Number % Counter == 0)

			return enPrimNotPrime::NotPrime;

	}

	return enPrimNotPrime::Prime;

}

int RandomNumber(int From, int To)
{
	//Function to generate a random number
	int randNum = rand() % (To - From + 1) + From;

	return randNum;
}

void FillArrayWithRandomNumbers(int arr[100], int& arrLength) 
{     
	cout << "\nEnter number of elements:\n";     
	cin >> arrLength; 
	
	for (int i = 0; i < arrLength; i++) 
		arr[i] = RandomNumber(1, 100); 
} 

void PrintArray(int arr[100], int arrLength) 
{ 
	for (int i = 0; i < arrLength; i++)         
		cout << arr[i] << " ";     
	cout << "\n"; 
} 

void CopyArray(int arrSource[100], int arrDestination[100], int arrLength) 
{ 
	for (int i = 0; i < arrLength; i++) 
		
			arrDestination[i] = arrSource[i];
}

void CopyPrimeNumbersOnly(int arr1[100], int arr2[100], int arrLength, int &arrLength2)
{
	int j = 0;

	for (int i = 0; i < arrLength; i++)
	{
		if (CheckPrime(arr1[i]) == enPrimNotPrime::Prime)
		{
			arr2[j] = arr1[i];
			j++;

		}
	}
	arrLength2  = j--;
}


int main() 
{ 
	//Seeds the random number generator in C++, called only once    
	srand((unsigned)time(NULL)); 
	
	int arr[100], arrLength;

	FillArrayWithRandomNumbers(arr, arrLength);    

	cout << "\nArray 1 Elements: ";
	PrintArray(arr, arrLength);

	int arr2[100], arrLength2 = 0;
	CopyPrimeNumbersOnly(arr, arr2, arrLength, arrLength2);

	cout << "\nPrime numbers in Array2:\n";
	PrintArray(arr2, arrLength2);

	return 0; 
} 




















































































































































































































































































































































































